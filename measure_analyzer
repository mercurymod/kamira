#!/usr/bin/env coffee
program = require('commander')
fs = require("fs")
path = require('path')
jsmeter = require("jsmeter-fixed").jsmeter
_ = require("underscore")
program.version('0.0.1')
  .option('-M, --measures <path>', 'measures directory')
  .option('-U, --util <path>', 'util file')
  .parse(process.argv)
parse = require("./parse").make_parse()
tokens = require("./tokens")
metrics = require("./metrics")
tokens.setup()

utilMethods = []
utils = fs.readFileSync(program.util).toString()
utilMethods = jsmeter.run(utils)

fs.readdir program.measures, (err, files) ->
  console.log(err) if err?
  measures = []
  for file in files
    continue if file == ".DS_Store"    
    pathName = path.join program.measures, file
    content = fs.readFileSync pathName
    json = JSON.parse(content.toString())
    js = json.map_fn

    js = js.replace("<%=.*init_js_frameworks.*%>", "")
    js = js.replace(/<%=.*effective_date.*%>/, 1347983662)
    
    console.log(js)
    return
    tree = parse(js)

    measure = jsmeter.run(js)
    complexitySet = _.union(utilMethods, measure)
    
    report = metrics.report(tree, complexitySet)
    report["name"] = json.name
    jsonId = if json.sub_id? then "#{json.nqf_id}#{json.sub_id}" else json.nqf_id
    report["id"] = jsonId
    console.log(jsonId)
    measures.push(report)
  console.log(JSON.stringify(measures))
    #for func in result
      #operators = _.union(operators, _.keys(func.operators))
      #operands = _.union(operands, _.keys(func.operands))
      #operatorCount += func.operatorCount
      #operandCount += func.operandCount
    #uniqueOperators = operators.length
    #uniqueOperands = operands.length
    #complexity = edges - nodes + 2 * exits
    #console.log("Complexity: " + complexity)
    #difficulty = (uniqueOperators / 2) * (operandCount / uniqueOperators)
    #console.log("Difficulty: " + difficulty)
    #length = (operatorCount + operandCount)
    #vocab = (uniqueOperators + uniqueOperands)
    #volume = length * Math.log(vocab)
    #console.log("Volume: " + volume)
    #effort = difficulty * volume
    #console.log("Effort: " + effort)
    #time = effort / 18
    #console.log("Hours to Code: " + (time / 3600))
    #bugs = volume / 3000
    #console.log("Number of Bugs expected: " + bugs)
