#!/usr/bin/env coffee
program = require('commander')
fs = require("fs")
path = require('path')
jsmeter = require("jsmeter-fixed").jsmeter
_ = require("underscore")
program.version('0.0.1')
  .option('-M, --measures <path>', 'measures directory')
  .option("-D --util-dir <path>", 'util directory')
  .parse(process.argv)
parse = require("./parse").make_parse()
tokens = require("./tokens")
metrics = require("./metrics")
tokens.setup()
utilMethods=[]
utilFiles = fs.readdirSync program.utilDir
for file in utilFiles
  continue if file == ".DS_Store"
  pathName = path.join program.utilDir, file
  content = fs.readFileSync(pathName).toString()
  utilsReport = jsmeter.run(content, file)
  utilMethods = utilMethods.concat(utilsReport)

fs.readdir program.measures, (err, files) ->
  console.log(err) if err?
  measures = []
  for file in files
    continue if file == ".DS_Store"    
    pathName = path.join program.measures, file

    js = fs.readFileSync(pathName).toString()
    js = js.replace(/<%=.*effective_date.*%>/, 1347983662)
    js = js.replace("<%= init_js_frameworks %>", "")
    tree = parse(js)

    measure = jsmeter.run(js, file)
    complexitySet = _.union(utilMethods, measure)

    report = metrics.report1(tree, complexitySet)
    # console.log(report)
    result = _.reduce report, (memo, m) ->
      memo.nodes += m.nodes
      memo.edges += m.edges
      memo.exits += m.exits
      memo
    , {nodes: 0, edges: 0, exits: 0}

    score = result.edges - result.nodes + result.exits
    measures.push([path.basename(file, ".js"), score])
  sorted = _.sortBy(measures, (m) -> m[1])
  console.log(sorted.reverse().join("\n"))