#!/usr/bin/env coffee

program = require 'commander'

program
  .option('-m, --measure <measureId>', 'specify a particular measure')
  .option('-l, --logging', 'turn on logging')
  .parse(process.argv)

_ = require 'underscore'

mongoose = require 'mongoose'
mongoose.connect 'mongodb://localhost/kamira'

Measure = require '../models/measure'
ValueSet = require '../models/value_set'
Cost = require '../models/cost'

measureCosts = {}

filter = {}
if program.measure
  filter["nqf_id"] = {"$in": program.measure.split(',') }

Cost.find (err, costs) ->

  # Map cost info to format currently expected by cost calculator
  oidCosts = {}
  for cost in costs
    oidCosts[cost.oid] =
      min: cost.firstQuartile
      max: cost.thirdQuartile

  ValueSet.find (err, valueSets) ->

    # Map oids to code sets so we can later display code set info on what's missing
    oidCodeSets = {}
    oidCodeSetCodes = {}
    for valueSet in valueSets
      oidCodeSets[valueSet.oid] = _(c.code_system_name for c in valueSet.concepts).uniq()
      oidCodeSetCodes[valueSet.oid] ||= {}
      for c in valueSet.concepts
        oidCodeSetCodes[valueSet.oid][c.code_system_name] ||= []
        oidCodeSetCodes[valueSet.oid][c.code_system_name].push(c.code)

    Measure.find(filter).sort('nqf_id').exec (err, measures) ->

      summary = []
    
      for measure in measures
        # PWKFIX Remove _doc when schema expansion is checked in
        [costs, details] = measure.calculateNumeratorCosts oidCosts, logging: program.logging

        header = "#{measure._doc.nqf_id}#{measure._doc.sub_id || ''}  #{measure.name}"
        console.log Array(header.length+1).join('=')
        console.log header
        console.log Array(header.length+1).join('=')
        console.log ''

        if costs
          console.log "Measure numerator cost: firstQuartile: $#{costs.min}  thirdQuartile: $#{costs.max}"
        else
          console.log "Unable to calculate costs for measure"

        if _(details).any((detail) -> detail.costs)
          console.log "\nCost information is available for the following OIDS:\n"
          for oid, detail of details when detail.costs
            console.log "  #{oid} #{detail.title}:  firstQuartile: $#{detail.costs.min}  thirdQuartile: $#{detail.costs.max}"

        if _(details).any((detail) -> !detail.costs)
          console.log "\nNo cost information is available for the following OIDS:\n"
          for oid, detail of details when !detail.costs
            console.log "  #{oid} #{detail.title} [#{oidCodeSets[oid]}]"
            # Show missing CTP, HCPCS and LOINC codes
            for code_set in ['CPT', 'HCPCS', 'LOINC']
              console.log "    Missing #{code_set} codes: #{oidCodeSetCodes[oid][code_set]}" if oidCodeSetCodes[oid][code_set]

        console.log ''

        summary.push("#{header}: firstQuartile: $#{costs.min}  thirdQuartile: $#{costs.max}") if costs

      console.log "=========================="
      console.log "Summary of numerator costs"
      console.log "=========================="
      console.log line for line in summary

      mongoose.disconnect()
